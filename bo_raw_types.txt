 
 Blood Omen: Legacy Of Kain 
 pill.big filetypes
 info by Pavel P. [VorteX] Timofeyev ( paul.vortex@gmail.com )
----------------------------------------

This file rougly explains structure of filetypes found in pill.big
It is unfinished, so will be extended in future

=======================================

 I. COMPRESSION METHODS
 
=======================================

 1. Index-based RLE
--

   Usually applied on index 0 or 255
   One we got such index, we read 1 byte after it and produce this amount of indexes
    
   Example: 255 32
	   this 2 bytes will output 32 pixels of 255
	   not that when reading picture this encoding is not breaked by width/height,
	   in other words while unpacking, we can go newline
	   
	   
 2. Colormap-based compression
--	   

  The point of this compression is to code 2 pixels per 1 byte (similar to #1)
  with palette being restricted to 16 colors (other indexes should be black)
  
  <byte> is readed byte, do output 2 pixels with this values:
    1 : <byte> - ((int)(<byte>/16)*16); // <byte> mod 16
    2 : (int)(<byte>/16) // <byte> div 16
  
  Example 231 will output 2 pixels with values:
    1 : 7
	2 : 14
	
=======================================

 II. BASIC TYPES
 
=======================================

 TIM
--
 Platform: PC, PlayStation
 Desc: standart PlayStation TIM file with header
 Note: one file could have several TIM's following each other
 Spec: 
   see Blood Pill sourcecode

   
 VAG
--
 Platform: PC, PlayStation
 Desc: standart PlayStation VAG (Very Audio Good) file with header
 Note: in PC all VAG files are unused
 Spec: 
   see Blood Pill sourcecode
   
   
 RAW ADPCM
--
 Platform: PC 
 Desc: 4bit IMA ADPCM raw streams, most files should be played at 11025, but some ones (music) is 22050
 Note: could not be detected automatically, only by filename search
 Spec: no


 Windows .WAVE
--
 Platform: PC
 Desc: standart Windows PCM Wave file with header, could be extracted without recoding
 Note: some files have corrupted header with bad rate info
 Spec: 
   see Windows Wave format
    

=======================================

 III. RAW TYPES
 
=======================================

 RAW FILE TYPE 1
--
 Platform: PC, PSX 
 Desc: item card, single-object file, really a raw type 3 but easy to load
 Spec:
  4 bytes - always 001 000 000 000
  4 bytes - filesize
  768 bytes - colormap data (24-bit RGB)
  4 mystic bytes
  1 byte width
  1 byte height
  1 byte x
  1 byte y
  <pixels>
      width*height bytes - indexes into colormap
  
 RAW FILE TYPE 2
--
 Platform: PC, PSX  
 Desc: multiobject file with per-object palette
 Note: real width/height may be double of what written in headers
 Spec:
   4 bytes - number of objects
   4 bytes - size of file
   768 bytes - unused colormap data
   <object headers>
      768 bytes - colormap
      4 bytes - offset after colormaps
      1 byte - width
      1 byte - height
      1 byte - x
      1 byte - y
   <object pixels>
     width*height bytes - indexes into colormap

	 
 RAW FILE TYPE 3
--
 Desc: multiobject file with shared palette, used by actor sprites and effects
 Note: could be half-width compressed (1 byte codes 2 pixels), refer to "Colormap-based compression"
   4 bytes - number of objects
   4 bytes - filesize
   768 bytes - colormap data (24-bit RGB)
   2 bytes - x position
   2 bytes - y position
 <object headers>
    4 bytes - offset after headers
    1 byte - width
    1 byte - height
    1 byte - x
    1 byte - y
 <compressed pixels of each object>
    refer to "Index-based RLE" compression, used in index 0 (sometimes 255 index as well)
	may use "Colormap-based" compression as well

	
 RAW FILE TYPE 4
--
 Desc: multiobject file with shared palette, with additional objects header, used by actor sprites and effects
 Note: some files has <mystic object headers> rounded to structure size, some not
 Note: usually <mystic object headers> has size rounded up to structure size (to nearest number divided by 4)
	   examples: 14 rounded to 16, 1 to 4, 2 to 4 etc.
       but some ones (perharps broken unused ones) have no such rounding
   4 bytes - number of objects
   4 bytes - filesize
   <mystic object headers> - 1 byte for each object
   768 bytes - colormap data (24-bit RGB)
   2 bytes - x position
   2 bytes - y position
 <object headers>
    4 bytes - offset after headers
    1 byte - width
    1 byte - height
    1 byte - x
    1 byte - y
 <compressed pixels of each object>
    refer to "Index-based RLE" compression, used in index 0 and 255
	may use "Colormap-based" compression as well

	
 RAW FILE TYPE 5
--
 Desc: multiobject file with shared palette, with no position info
 Note: some chunks may have broken width/height because they width is above 255 
       and it uses 1 byte to encode it, 255 + [width] should be used to correct this
 Spec:
   4 bytes - number of objects
   4 bytes - filesize
   768 bytes - colormap data (24-bit RGB)
 <object headers>
    4 bytes - offset after headers
    1 byte - width
    1 byte - height
    1 byte - x
    1 byte - y
 <compressed pixels of each object>
	refer to "Index-based RLE" compression, used in index 0 (sometimes 255 index as well)

	
 RAW FILE TYPE 6
--
 Desc: unused at the moment

 
 RAW FILE TYPE 7
--
 Desc: tile?
 Note: unfinished
 Spec:
 0: 4 bytes - data size
 4-25: ?
 26: colormap chunks
     8 bytes - coding 4 16-bit colors
     1 byte - unknown 'separator byte', 255 if there is nother chunk, otherwize break