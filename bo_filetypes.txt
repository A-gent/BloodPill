 
 Blood Omen: Legacy Of Kain 
 pill.big filetypes
 draft version 0.5
 info by Pavel P. [VorteX] Timofeyev ( paul.vortex@gmail.com )
----------------------------------------

This file rougly explains structure of filetypes found in pill.big
It is unfinished, so will be extended in future

=======================================

 I. COMPRESSION METHODS
 
=======================================

 In Blood Omen, various compression methods are used to make graphics as small as possible (due to limits of PSX hardware).

 1. Index-based RLE
--

   Usually applied on index 0 or 255
   Once we got such index, we read 1 byte after it and produce this amount of indexes
    
   Example: 255 32
	   this 2 bytes will output 32 pixels of 255
	   note that when reading picture this encoding is not breaked by width/height,
	   in other words while decompressing, we can go newline
	   
	   
 2. Colormap-based compression
--	   

  The point of this compression is to code 2 pixels per 1 byte
  with palette being restricted to 16 colors (other indexes should be black)
  
  <byte> is readed byte, do output 2 pixels with this values:
    1 : <byte> - (int)(<byte>/16)*16; // <byte> mod 16
    2 : (int)(<byte>/16) // <byte> div 16
  
  Example 231 will output 2 pixels with values:
    1 : 7
	2 : 14
	
 3. Variation of LZ77
--
  Variant of the LZ77 algorithm that is used for .
  See Blood Pill sources (mapfile.c function LzDec) for more details.

=======================================

 II. IMAGES
 
=======================================

 There are only one type of image files, and it goes directly from Playstation standarts.

 Formats description:

 TIM
--
 Platform: PC, PlayStation
 Desc: standart PlayStation TIM file with header
 Note: one file could have several TIM's following each other
 Spec: 
   see Blood Pill sourcecode (timfile.c)

=======================================

 II. SOUNDS
 
=======================================

 Sound part are tricky, PC and PSX version of Blood Omen differs in type of files used. PSX version uses VAG format (a standart for Playstation), PC version uses raw adpcm and wave format, and also contains from VAG files which are not used.

 Also many VAG files are headerless (.fag).

 Formats description:
   
 VAG
--
 Platform: PC, PlayStation
 Desc: standart PlayStation VAG (Very Audio Good) file with header
 Note: in PC all VAG files are unused. Also note that many VAG's have no 'VAGp' in header (hence could be only detected only by direct parsing);
 Spec: 
   see Blood Pill sourcecode (bigfile.c and vagfile.c)
   
 RAW ADPCM
--
 Platform: PC 
 Desc: 4bit IMA ADPCM raw streams, most files should be played at 11025, but some ones (music) is 22050
 Note: could not be detected automatically as it's a raw ADPCM stream with no header at all, detection is done by filename using known-hashes-list
 Spec: no

 Windows .WAVE
--
 Platform: PC
 Desc: standart Windows PCM Wave file with header, could be extracted without recoding
 Note: header of many files are incorrect, most player with non-standart sample rate (not 11025 or 22050), like 4000 or 13000.
 Spec: 
   see Windows Wave format

=======================================

 III. SPRITES
 
=======================================

 Sprites of Blood Omen are not hard to parse, but theres several files that is used incorrect specs, so you should check everything when parsing.

 Maybe, there is some relation between filenames (there are 3 extensions: SHA, SDR, SHD and several prefixes) and hacks/type used to parse it, but none investigations has been done in this document.

 Formats description:

 SPRITE TYPE 1
--
 Platform: PC, PSX 
 Desc: item card, single-object file, really a SPRITE type 3 but easy to load because of only 1 object and no compression used
 Spec:
  4 bytes - always 001 000 000 000
  4 bytes - filesize
  768 bytes - colormap data (24-bit RGB)
  2 bytes (signed short) - x position
  2 bytes (signed short) - y position
  1 byte width
  1 byte height
  1 byte x
  1 byte y
  <pixels>
      width*height bytes - indexes into colormap
  
 SPRITE TYPE 2
--
 Platform: PC, PSX  
 Desc: multiobject file with per-object palette
 Note: real width/height may be double of what written in headers
 Spec:
   4 bytes - number of objects
   4 bytes - size of file
   768 bytes - unused colormap data
   <object headers>
      768 bytes - colormap
      4 bytes - offset after colormaps
      1 byte - width
      1 byte - height
      1 byte - x
      1 byte - y
   <object pixels>
     width*height bytes - indexes into colormap

	 
 SPRITE TYPE 3
--
 Desc: multiobject file with shared palette, used by actor sprites and effects
   4 bytes - number of objects
   4 bytes - filesize
   768 bytes - colormap data (24-bit RGB)
   2 bytes (signed short) - x position
   2 bytes (signed short) - y position
 <object headers>
    4 bytes - offset after headers
    1 byte - width
    1 byte - height
    1 byte - x
    1 byte - y
 <compressed pixels of each object>
    refer to "Index-based RLE" compression, may be used in index 0 (sometimes 255 index as well)
	may use "Colormap-based" compression as well

 SPRITE TYPE 4
--
 Desc: multiobject file with shared palette, with additional objects header, used by actor sprites and effects
 Note: some files has <mystic object headers> rounded to structure size, some not
       usually <mystic object headers> has size rounded up to structure size (to nearest number divided by 4)
	   examples: 14 rounded to 16, 1 to 4, 2 to 4 etc.
       but some ones (perharps broken unused ones) have no such rounding
   4 bytes - number of objects
   4 bytes - filesize
   <mystic object headers> - 1 byte for each object
   768 bytes - colormap data (24-bit RGB)
   2 bytes (signed short) - x position
   2 bytes (signed short) - y position
 <object headers>
    4 bytes - offset after headers
    1 byte - width
    1 byte - height
    1 byte - x
    1 byte - y
 <compressed pixels of each object>
    refer to "Index-based RLE" compression, used in index 0 and 255
	may use "Colormap-based" compression as well

	
 SPRITE TYPE 5
--
 Desc: multiobject file with shared palette, with no position info
 Note: some chunks may have broken width/height because they width is above 255 
       and it uses 1 byte to encode it, 255 + [width] should be used to correct this
 Spec:
   4 bytes - number of objects
   4 bytes - filesize
   768 bytes - colormap data (24-bit RGB)
 <object headers>
    4 bytes - offset after headers
    1 byte - width
    1 byte - height
    1 signed byte - x
    1 signed byte - y
 <compressed pixels of each object>
	refer to "Index-based RLE" compression, used in index 0 (sometimes 255 index as well)

=======================================

 IV. MAP FILES
 
=======================================

 Maps are central thing that brings all resources (images, sounds, textures, sprites) together. There is about 80% of map structure investigated and allow to extract general amount of things from it (including textures used, a map image, monster/effect/item placement, triggers, info marks, doors and buttons etc.)

 Each map has a mapnum and section that is included in filename. That info is used to place map in a global adventure map (see http://www.thelostworlds.net/BO1/Map_Survey.html for complete info about level naming).

 Formats description:
 
 TILES TEXTURE
--
 Desc: tile texture whic his used to map level
 Spec: a file contains 4 byte of data (chich is size of file - 4 bytes) and Standart 8-bit TIM file packed with LZ77-like compression (see Comression #3).

 Each tile texture has 8x8 = 64 cells holding tiles, for maps engine does a tile-per-tile rendering (using each part separately), for destructable objects it does a non-comformal tiles, which coordinates is stored in a special part of level structure.

 MAP FILE
--
 Desc: map
 Spec: a file contains 4 byte of data (chich is size of file - 4 bytes) and file packed with LZ77-like compression (see Comression #3) holding map structure. See Blood Pill sources (mapfile.c, mapfile.h) for complete info how to read and draw a map file.
